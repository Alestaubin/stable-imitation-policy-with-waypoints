<launch>

    <!-- Arguments -->
    <!-- Start the GUIs -->
    <arg name="start_gazebo" default="true"/>
    <arg name="gazebo_gui"   default ="true"/>
    <arg name="start_rviz" 	 default="false"/>
    <arg name="world_name"   default="worlds/empty.world"/>

    <!-- Initial position in Gazebo -->
    <arg name="x0" default="0"/>
    <arg name="y0" default="0"/>
    <arg name="z0" default="0"/>

    <!-- Arm type -->
    <arg name="arm" default="gen3"/>
    <arg name="dof" default="7" /> 		<!-- Number of degrees of freedom of the arm -->
    <arg name="vision" default="true"/> <!-- True if the arm has a Vision module -->

    <!-- Default gripper for Gen3 is none, default gripper for Gen3 lite is gen3_lite_2f -->
    <arg name="gripper" default="" if="$(eval arg('arm') == 'gen3')"/>


    <arg name="robot_name" default="$(arg arm)"/>
    <arg name="prefix" default=""/>
    <arg name="cyclic_data_publish_rate" default="40"/> <!--Hz-->

    <!-- Gazebo parameters -->
    <arg name="use_sim_time" default="true"/>
    <arg name="debug" default="false" />
    <arg name="paused" default="false"/>

    <!-- Start Gazebo -->
    <include file="$(find kortex_gazebo)/launch/start_gazebo.launch" if="$(arg start_gazebo)">
        <arg name="gui" value="$(arg gazebo_gui)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="paused" 		value="$(arg paused)"/>
        <arg name="world_name" value="$(arg world_name)" />
    </include>

    <!-- Delay before homing the arm -->
    <arg name="start_delay_seconds" default="10"/>

    <group ns="$(arg robot_name)">

        <!-- Load the description for the robot -->
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(find kortex_description)/robots/$(arg arm).xacro
        	dof:=$(arg dof) vision:=$(arg vision) sim:=true prefix:=$(arg prefix)"
         />

       <param name="urdf_file_name" value="$(find kortex_description)/urdf/gen3.urdf"/>
        <!-- Spawn the robot in Gazebo -->
        <!-- <rosparam command="load" file="$(find kortex_description)/arms/$(arg arm)/$(arg dof)dof/config/gazebo_initial_joint_positions.yaml"/> -->
        <!-- <param name="initial_positions" value=""/> TODO -->
        <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
            args="-urdf -param robot_description -model $(arg robot_name) -x $(arg x0) -y $(arg y0) -z $(arg z0)
                -robot_namespace $(arg robot_name)
                -J joint_1 1.57
                -J joint_2 0.35
                -J joint_3 1.57
                -J joint_4 -1.57
                -J joint_5 0
                -J joint_6 0.75
                -J joint_7 1.57"/>


                 <!---J joint_1 1.57
                -J joint_2 0.35
                -J joint_3 1.57
                -J joint_4 -1.57
                -J joint_5 0
                -J joint_6 -1.00
                -J joint_7 1.57"/-->


        <!-- Load controller configuration file from kortex_control package -->
        <!-- rosparam file="$(find kortex_control)/arms/$(arg arm)/$(arg dof)dof/config/joint_position_controllers.yaml" command="load" subst_value="true"/-->
        <!-- rosparam file="$(find kortex_control)/grippers/$(arg gripper)/config/gripper_action_controller_parameters.yaml" command="load" subst_value="true" unless="$(eval not arg('gripper'))"/-->



		<!-- Start robot state publisher -->
		<node name="robot_state_publisher"
				pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
		    <!--remap from="/joint_states" to="/$(arg prefix)/joint_states"/-->
		    <!--remap from="robot_description" to="$(arg arm)"/-->
		  </node>


        <!-- Joint State Publisher -->
        <!--node name="$(arg prefix)$(arg arm)_trajectory_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
            output="screen" args="$(arg prefix)$(arg arm)_joint_trajectory_controller $(arg prefix)joint_state_controller"
            if="$(eval not arg('gripper'))"/-->



        <!-- Individual position controllers are stopped at first -->
     	<rosparam command="load" file="$(find kortex_gazebo)/config/gen3_joint_group_controller.yaml" />
	   	<node name="joints_controller"
	   			pkg="controller_manager" type="spawner" respawn="false" output="screen"
       			args="joint_state_controller joint_group_position_controller" />



        <!-- Start simulated Kortex Driver -->
        <!--launch-prefix="gdb -ex run args"-->
        <!--node name="$(arg robot_name)_driver" pkg="kortex_driver" type="kortex_arm_driver" output="screen">
            <param name="sim" value="true"/>
            <param name="cyclic_data_publish_rate" value="$(arg cyclic_data_publish_rate)"/>
            <param name="arm" value="$(arg arm)"/>
            <param name="gripper" value="$(arg gripper)"/>
            <param name="dof" value="$(arg dof)"/>
            <param name="robot_name" value="$(arg robot_name)"/>
            <param name="prefix" value="$(arg prefix)"/>
            <rosparam command="load" file="$(find kortex_description)/arms/$(arg arm)/$(arg dof)dof/config/joint_limits.yaml" subst_value="true"/>
            <rosparam command="load" file="$(find kortex_description)/arms/$(arg arm)/$(arg dof)dof/config/twist_limits.yaml" subst_value="true"/>
        </node-->


        <!-- Without gripper -->
        <!--include file="$(find kortex_description)/../kortex_move_it_config/$(arg arm)_move_it_config/launch/move_group.launch" if="$(eval not arg('gripper'))">
            <arg name="dof" value="$(arg dof)"/>
            <arg name="prefix" value="$(arg prefix)"/>
        </include-->


        <!-- Sleep, then unpause the physics in Gazebo and home the robot -->
        <!--node name="home_the_arm" pkg="kortex_gazebo" type="home_robot.py" output="screen" respawn="false" launch-prefix="bash -c 'sleep $(arg start_delay_seconds); $0 $@'">
            <param name="robot_name" value="$(arg robot_name)"/>
        </node-->

        <!-- Test if homing the robot with MoveIt ended correctly -->
        <!--test test-name="paramtest_gazebo_initialization" pkg="rostest" type="paramtest">
            <param name="param_name_target" value="is_initialized" />
            <param name="param_value_expected" value="true" />
            <param name="wait_time" value="60" />
        </test-->


    </group>

</launch>
